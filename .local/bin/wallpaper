#!/usr/bin/env bash

# All the wallpapers are stored in ~/.config/wallpapers/selection/
# Under `selection/` there are multiple directories, each containing a set of wallpapers
# We want the user to be able to select individual wallpapers from these directories, or rotate
# through them randomly if the user selected a directory

WALLPAPERS=~/.config/wallpapers/selection/
HYPRPAPER_CONFIG=~/.config/hypr/hyprpaper.conf

function print_help() {
    echo "Usage: wallpaper [OPTION] [PATH]"
    echo "Set the wallpaper for the current session using hyprpaper"
    echo ""
    echo "Options:"
    echo "  --default                Set the default wallpaper"
    echo "  --random                 Set a random wallpaper from the selection"
    echo "  --random [CATEGORY]      Set a random wallpaper from specific category"
    echo "  --gui                    Open a GUI to select a wallpaper"
    echo "  --menu                   Open a menu to select a wallpaper"
    echo "  --set [PATH]             Set a specific wallpaper by path"
    echo "  --list                   List available categories"
    echo "  --help                   Display this help message"
    echo ""
    echo "Examples:"
    echo "  wallpaper --random"
    echo "  wallpaper --random anime"
    echo "  wallpaper --set /path/to/wallpaper.jpg"
    echo "  wallpaper --list"
}

function error_exit() {
    echo "Error: $1" >&2
    exit 1
}

function check_hyprpaper() {
    if ! command -v hyprctl >/dev/null 2>&1; then
        error_exit "hyprctl not found. Make sure Hyprland is running."
    fi
    
    if ! pgrep -x hyprpaper >/dev/null; then
        error_exit "hyprpaper is not running. Please start hyprpaper first."
    fi
}

function get_absolute_path() {
    local path="$1"
    if [[ "$path" == ~* ]]; then
        echo "${path/#\~/$HOME}"
    elif [[ "$path" == /* ]]; then
        echo "$path"
    else
        echo "$(pwd)/$path"
    fi
}

function validate_image() {
    local image_path="$1"
    local abs_path=$(get_absolute_path "$image_path")
    
    if [[ ! -f "$abs_path" ]]; then
        error_exit "Image file does not exist: $abs_path"
    fi
    
    # Check if it's a supported image format
    local ext="${abs_path##*.}"
    case "${(L)ext}" in
        jpg|jpeg|png|webp|bmp|gif)
            ;;
        *)
            error_exit "Unsupported image format: $ext"
            ;;
    esac
    
    echo "$abs_path"
}

function set_wallpaper() {
    local image_path="$1"
    local monitor="${2:-}"
    
    echo "Setting wallpaper: $image_path"
    
    # Validate the image
    local abs_path=$(validate_image "$image_path")
    
    # Check hyprpaper status
    check_hyprpaper
    
    # Use proper hyprpaper IPC commands: preload then wallpaper
    echo "Preloading wallpaper..."
    hyprctl hyprpaper preload "$abs_path"
    
    if [[ $? -ne 0 ]]; then
        error_exit "Failed to preload wallpaper via IPC"
    fi
    
    echo "Setting wallpaper on monitors..."
    if [[ -n "$monitor" ]]; then
        hyprctl hyprpaper wallpaper "$monitor,$abs_path"
    else
        hyprctl hyprpaper wallpaper ",$abs_path"
    fi
    
    if [[ $? -eq 0 ]]; then
        echo "Wallpaper set successfully!"
    else
        error_exit "Failed to set wallpaper via IPC"
    fi
}

function list_categories() {
    echo "Available wallpaper categories:"
    if [[ -d "$WALLPAPERS" ]]; then
        for dir in "$WALLPAPERS"*/; do
            if [[ -d "$dir" ]]; then
                local category=$(basename "$dir")
                local count=$(find "$dir" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.webp" -o -iname "*.bmp" -o -iname "*.gif" \) | wc -l)
                echo "  $category ($count images)"
            fi
        done
    else
        error_exit "Wallpapers directory not found: $WALLPAPERS"
    fi
}

function get_random_wallpaper() {
    local category="${1:-}"
    local search_dir="$WALLPAPERS"
    
    if [[ -n "$category" ]]; then
        search_dir="$WALLPAPERS/$category"
        if [[ ! -d "$search_dir" ]]; then
            error_exit "Category not found: $category"
        fi
    fi
    
    # Find all image files
    local images=($(find "$search_dir" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.webp" -o -iname "*.bmp" -o -iname "*.gif" \) 2>/dev/null))
    
    if [[ ${#images[@]} -eq 0 ]]; then
        if [[ -n "$category" ]]; then
            error_exit "No images found in category: $category"
        else
            error_exit "No images found in wallpapers directory"
        fi
    fi
    
    # Select random image
    local random_index=$((RANDOM % ${#images[@]}))
    echo "${images[$random_index]}"
}

function show_menu() {
    if command -v fzf-img >/dev/null 2>&1; then
        local selected_image=$(find "$WALLPAPERS" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.webp" -o -iname "*.bmp" -o -iname "*.gif" \) | fzf-img)
        if [[ -n "$selected_image" ]]; then
            set_wallpaper "$selected_image"
        else
            echo "No wallpaper selected."
        fi
    elif command -v fzf >/dev/null 2>&1; then
        local selected_image=$(find "$WALLPAPERS" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.webp" -o -iname "*.bmp" -o -iname "*.gif" \) | fzf --preview 'echo {}' --preview-window=down:1)
        if [[ -n "$selected_image" ]]; then
            set_wallpaper "$selected_image"
        else
            echo "No wallpaper selected."
        fi
    else
        error_exit "fzf-img or fzf not found. Please install one for menu functionality."
    fi
}

function show_gui() {
    alacritty --title 'Wallpaper Selector' -e zsh -c "~/.local/bin/wallpaper --menu"
}

function set_default_wallpaper() {
    # Set a default wallpaper from the star-wars directory (as seen in config)
    local default_wallpaper="$WALLPAPERS/star-wars/ring-station.jpg"
    if [[ -f "$default_wallpaper" ]]; then
        set_wallpaper "$default_wallpaper"
    else
        # Fallback to any available wallpaper
        local random_wallpaper=$(get_random_wallpaper)
        set_wallpaper "$random_wallpaper"
    fi
}

# Main script logic
case "${1:-}" in
    --help|-h)
        print_help
        ;;
    --list|-l)
        list_categories
        ;;
    --random|-r)
        local category="${2:-}"
        local random_wallpaper=$(get_random_wallpaper "$category")
        set_wallpaper "$random_wallpaper"
        ;;
    --set|-s)
        if [[ -z "$2" ]]; then
            error_exit "Please provide a path to the wallpaper image"
        fi
        set_wallpaper "$2"
        ;;
    --default|-d)
        set_default_wallpaper
        ;;
    --menu|-m)
        show_menu
        ;;
    --gui|-g)
        show_gui
        ;;
    "")
        # No arguments - show help
        print_help
        ;;
    *)
        # If the argument looks like a file path, try to set it as wallpaper
        if [[ -f "$1" ]]; then
            set_wallpaper "$1"
        else
            error_exit "Unknown option: $1. Use --help for usage information."
        fi
        ;;
esac
